/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Estructura.ModeloTablaAlfombraPrincipal;
import Estructura.ModeloTablaPersonaAuxiliar;
//import static GUI.MetodoEuler.Y0;
//import static GUI.MetodoEuler.h;
//import static GUI.MetodoEuler.x0;
import static GUI.MetodoEuler.xfinal;
import Objetos.AlfombraPrincipal;
import Objetos.Euler;
import Objetos.PersonasAuxiliar;
import Objetos.Uniforme;
import java.awt.HeadlessException;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import sun.io.Converters;
import sun.org.mozilla.javascript.internal.ast.TryStatement;
/**
 *
 * @author Bel√©n
 */
public class Principal extends javax.swing.JFrame {
public static double x0;
    public static double y0;
    public static double h;
    public MetodoEuler euler;
    public static double xfinal;
    private static double mediaUniforme;
    private static double desvioUniforme;
    private static double tiempoSuspension;
    private static double tiempoLimpieza;
    private static double tiempoTardaLanzamiento;
    private static double cantidadSegundosASimular;
    private static Integer cantidadIteracione;
    private static AlfombraPrincipal principal[] = new AlfombraPrincipal[2];
    private static PersonasAuxiliar auxiliar[] = new PersonasAuxiliar[2];
    private int tipoEvento = 0;
    private static double promPorc = 0;
private static double promMaxCola = 0;
    private static double promMaxTiempo = 0;
    public Principal() throws HeadlessException {
        initComponents();
        this.setLocationRelativeTo(null);
    }
    
//    

    /**
     * Creates new form Principal
     */
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        textField1 = new javax.swing.JFormattedTextField();
        textField2 = new javax.swing.JFormattedTextField();
        textField3 = new javax.swing.JFormattedTextField();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SIM");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Simulacion Alfombra"));

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTable1.setModel(new Estructura.ModeloTablaAlfombraPrincipal());
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1050, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos"));
        jPanel1.setName("aaa"); // NOI18N

        jLabel1.setText("Evento Llega una Persona. Tiempo entre que llega una nueva persona (Segundos): ");

        jTextField1.setText("180");

        jLabel2.setText(" +/-");

        jTextField2.setText("5");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Evento Inicia Suspende Tiradas. Duracion Alfombra Disponible (Segundos):");

        jTextField3.setText("300");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Evento Fin de Limpieza. Duracion de Limpieza (Seguntos):");

        jTextField4.setText("100");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jButton1.setText("Simular");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Cantidad Segundo a simular:");

        jTextField5.setText("10000");
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel8.setText("Cantidad de iteraciones a simular:");

        jTextField6.setText("1");
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Evento Fin Lanzamiento"));

        label1.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        label1.setText("Tiempo Inicial (segundos) to:");

        label2.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        label2.setText("Medida de Alfomfra(metros) Xo:");

        label3.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        label3.setText("(segundos) h:");

        textField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        textField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textField1.setText("0");
        textField1.setToolTipText("");

        textField2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        textField2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textField2.setText("120");

        textField3.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        textField3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textField3.setText("0.005");
        textField3.setToolTipText("");

        jButton2.setText("Mostrar Tabla de Calculo ");
        jButton2.setEnabled(false);
        jButton2.setRequestFocusEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addGap(15, 15, 15)
                            .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textField1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textField3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textField2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(textField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, 0)
                        .addComponent(textField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(1, 1, 1)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(textField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(160, 160, 160))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(150, 150, 150))
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Personas"));

        jTable2.setModel(new Estructura.ModeloTablaPersonaAuxiliar());
        jScrollPane3.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1068, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(254, 254, 254))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 1091, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       limpiarValoresPrevios();
     
       euler= new MetodoEuler();    
       euler.limpiarValoresPreviosEuler();
        if(tomarValoresIngresadosEuler())
        {
        
        tiempoTardaLanzamiento=euler.inicializarEuler();
            
        }
        tomarValoresIngresados();
        
        inicializarSimulacion();
        this.jButton2.setEnabled(true);
//       promPorc=promPorc/cantidadIteracione;
//       promMaxCola=promMaxCola/cantidadIteracione;
//       promMaxTiempo= promMaxTiempo/cantidadIteracione;
        promPorc=promPorc*100;
      DecimalFormat df = new DecimalFormat("0.00");

        jLabel9.setText("RESULTADOS FINALES: * "+ df.format(promPorc) +"% de las Personas tienen que Hacer cola de espera para lanzarse.");
         DecimalFormat df1= new DecimalFormat("0");
       // this.jLabel9.setText(String.valueOf(promPorc));
        this.jLabel10.setText("* Promedio de Maxima cantidad de personas en cola de espera es "+ df1.format(promMaxCola)+".");
        
        this.jLabel11.setText("* Promedio de Maximo tiempo de espera en cola es " + df.format(promMaxTiempo)+" segundos");
        //    System.out.println("Resultado final:Promedio Pordentaje:"+promPorc+"Promedio Maxima Cola de Espera: "+promMaxCola+" Promedio de Tiempo de Espera: "+promMaxTiempo);


        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        euler.setVisible(true);
        //        limpiarValoresPrevios();
        
//        if( tomarValoresIngresados())
//        {
//            inicializar();
//            //jPanel3.setVisible(true);
//            DecimalFormat df = new DecimalFormat("0.0000");
//
//            jLabel3.setText("Cada lanzamiento tarda "+ df.format(xfinal) +" segundos");
//        }
//        else
//        jLabel3.setText("");
//
//        //jLabel1.setText("Cada lanzamiento tarda "+ xfinal +" segundos");
//        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public void setTiempoTardaLanzamiento(double Xfinal) {
        this.tiempoTardaLanzamiento = Xfinal;
    }

    private void tomarValoresIngresados() {
        try {
            if (!jTextField1.getText().equals("")) {
                mediaUniforme = Double.parseDouble(jTextField1.getText());
            } else {
                JOptionPane.showMessageDialog(this, "Debe ingresar un valor inicial de la media.", "Faltan datos", JOptionPane.ERROR_MESSAGE);
                jTextField1.requestFocus();
            }
        } catch (Exception e) {
            System.out.println("ERROR!!!" + e.getMessage());
        }
        try {
            if (!jTextField2.getText().equals("")) {
                desvioUniforme = Double.parseDouble(jTextField2.getText());
            } else {
                JOptionPane.showMessageDialog(this, "Debe ingresar un valor inicial del Desvio.", "Faltan datos", JOptionPane.ERROR_MESSAGE);
                jTextField2.requestFocus();
            }
        } catch (Exception e) {
            System.out.println("ERROR!!!" + e.getMessage());
        }

        try {
            if (!jTextField3.getText().equals("")) {
                tiempoSuspension = Double.parseDouble(jTextField3.getText());
            } else {
                JOptionPane.showMessageDialog(this, "Debe ingresar un valor inicial de tiempo para que se encuentra disponible la alfonbra.", "Faltan datos", JOptionPane.ERROR_MESSAGE);
                jTextField3.requestFocus();
            }
        } catch (Exception e) {
            System.out.println("ERROR!!!" + e.getMessage());
        }

        try {
            if (!jTextField4.getText().equals("")) {
                tiempoLimpieza = Double.parseDouble(jTextField4.getText());
            } else {
                JOptionPane.showMessageDialog(this, "Debe ingresar un valor inicial del Tarda la limpieza.", "Faltan datos", JOptionPane.ERROR_MESSAGE);
                jTextField4.requestFocus();
            }
        } catch (Exception e) {
            System.out.println("ERROR!!!" + e.getMessage());
        }

        try {
            if (!jTextField5.getText().equals("")) {
                cantidadSegundosASimular = Double.parseDouble(jTextField5.getText());
            } else {
                JOptionPane.showMessageDialog(this, "Debe ingresar un valor inicial de segundos a simular.", "Faltan datos", JOptionPane.ERROR_MESSAGE);
                jTextField5.requestFocus();
            }
        } catch (Exception e) {
            System.out.println("ERROR!!!" + e.getMessage());
        }
        try {
            if (!jTextField6.getText().equals("")) {
                cantidadIteracione = Integer.parseInt(jTextField6.getText());
            } else {
                JOptionPane.showMessageDialog(this, "Debe ingresar un valor inicial de la cantidad de simulaciones a iterar.", "Faltan datos", JOptionPane.ERROR_MESSAGE);
                jTextField6.requestFocus();
            }
        } catch (Exception e) {
            System.out.println("ERROR!!!" + e.getMessage());
        }


    }

    private void inicializarSimulacion() {
        double sumPorc = 0;
        double sumMaxCola = 0;
        double sumMaxTiempo = 0;
        for (int i = 1; i < (this.cantidadIteracione + 1); i++) {
            this.jTable1.removeAll();
            this.jTable2.removeAll();
            this.jTable2.removeEditor();
            jTable2.setModel(new Estructura.ModeloTablaPersonaAuxiliar());
            this.jTable1.removeEditor();
            jTable1.setModel(new Estructura.ModeloTablaAlfombraPrincipal());
            for (int k = 0; k < 2; k++) {
                principal[k] = new AlfombraPrincipal();
                auxiliar[k] = new PersonasAuxiliar();
            }

            principal[1].setReloj(0);
            principal[1].setEvento("Inicio");
            principal[1].setEstadoAlfombra("Disponible");
            principal[1].setInicioSuspencion(tiempoSuspension);
            principal[1].setFinLimpieza(0);

            double desde = (double) (mediaUniforme - desvioUniforme);
            double hasta = (double) (mediaUniforme + desvioUniforme);
            double prox = Uniforme.getRdo(desde, hasta);
            principal[1].setRND(prox);
            principal[1].setLlegaPersona(prox+principal[1].getReloj());

            principal[1].setNroPersona(0);
            principal[1].setHoraLlegoPers(0);
            principal[1].setEstadoPers("-");
            principal[1].setFinDeslizaPers(0);
            principal[1].setTiempoEspera(0);
            principal[1].setColaPesrsEspera(0);
            principal[1].setColaPersDeslizan(0);
            principal[1].setCantPersFinalizan(0);
            principal[1].setCantPersEsperaron(0);
            principal[1].setMaxColaEspera(0);
            principal[1].setAcuTiempoEspera(0);
            principal[1].setMaxTiempoEspera(0);

            auxiliar[1].setNroPersona(0);
            auxiliar[1].setHoraLlego(0);
            auxiliar[1].setEstadoPersna("");
            auxiliar[1].setEsperoEnCola("");
            auxiliar[1].setFinDeslizamiento(0);
            auxiliar[1].setTiempoQueEspero(0);

            try {
                ((ModeloTablaAlfombraPrincipal) this.jTable1.getModel()).anhadeFila(principal[1]);
                // Component c= ((MTTablaPrincipalDeEventos)this.tablaPrincipal.getModel()).getTableCellRendererComponent(tablaPrincipal,null,false,false,0,3);
            } catch (Exception e) {
                System.out.println("ERROR!!!" + e.getMessage());
            }

            try {
                ((ModeloTablaPersonaAuxiliar) this.jTable2.getModel()).agregarObjeto(auxiliar[1]);
            } catch (Exception e) {
                System.out.println("ERROR!!!" + e.getMessage());
            }


            while (principal[1].getReloj() < Principal.cantidadSegundosASimular) {
                copiarDatosHistoricos();

                principal[1] = new AlfombraPrincipal();
                auxiliar[1] = new PersonasAuxiliar();

                double eventoMenorHs = cualEsElProximoEvento();
                principal[1].setReloj(eventoMenorHs);
                if (eventoMenorHs > this.cantidadSegundosASimular) {
                    break;
                }
                evaluarTipoEvento();

            }
            // sumatoria de datos finales de cada iteracion
            double porcentajei = (double) principal[0].getCantPersEsperaron() / principal[0].getCantPersFinalizan();
            sumPorc = sumPorc + porcentajei;
            double maxColai = (double) principal[0].getMaxColaEspera();
            sumMaxCola = (double) sumMaxCola + maxColai;
            double maxTiempoi = (double) principal[0].getMaxTiempoEspera();
            sumMaxTiempo = (double) sumMaxTiempo + maxTiempoi;
             
//       System.out.println("Resultado final:Promedio Pordentaje:"+promPorc+"Promedio Maxima Cola de Espera: "+promMaxCola+" Promedio de Tiempo de Espera: "+promMaxTiempo);
       }
      promPorc=(double)sumPorc/cantidadIteracione;
      promMaxCola=(double)sumMaxCola/cantidadIteracione;
      promMaxTiempo=(double) sumMaxTiempo/cantidadIteracione;
       //((ModeloTablaPersonaAuxiliar) this.jTable2.getModel()).copiarSumatoria();
    }
        //calcularPromedios();


    

    private void copiarDatosHistoricos() {
        principal[0].setReloj(principal[1].getReloj());
        principal[0].setEvento(principal[1].getEvento());
        principal[0].setEstadoAlfombra(principal[1].getEstadoAlfombra());
        principal[0].setInicioSuspencion(principal[1].getInicioSuspencion());
        principal[0].setFinLimpieza(principal[1].getFinLimpieza());
        principal[0].setRND(principal[1].getRND());
        principal[0].setLlegaPersona(principal[1].getLlegaPersona());
        principal[0].setNroPersona(principal[1].getNroPersona());
        principal[0].setHoraLlegoPers(principal[1].getHoraLlegoPers());
        principal[0].setEstadoPers(principal[1].getEstadoPers());
        principal[0].setFinDeslizaPers(principal[1].getFinDeslizaPers());
        principal[0].setTiempoEspera(principal[1].getTiempoEspera());
        principal[0].setColaPesrsEspera(principal[1].getColaPesrsEspera());
        principal[0].setColaPersDeslizan(principal[1].getColaPersDeslizan());
        principal[0].setCantPersFinalizan(principal[1].getCantPersFinalizan());
        principal[0].setCantPersEsperaron(principal[1].getCantPersEsperaron());        
        principal[0].setMaxColaEspera(principal[1].getMaxColaEspera());
        principal[0].setAcuTiempoEspera(principal[1].getAcuTiempoEspera());
        principal[0].setMaxTiempoEspera(principal[1].getMaxTiempoEspera());
        
        auxiliar[0].setNroPersona(auxiliar[1].getNroPersona());
        auxiliar[0].setHoraLlego(auxiliar[1].getHoraLlego());
        auxiliar[0].setEstadoPersna(auxiliar[1].getEstadoPersna());
        auxiliar[0].setEsperoEnCola(auxiliar[1].getEsperoEnCola());
        auxiliar[0].setFinDeslizamiento(auxiliar[1].getFinDeslizamiento());
        auxiliar[0].setTiempoQueEspero(auxiliar[1].getTiempoQueEspero());
                
    }

    private double cualEsElProximoEvento() {

        Double aux = 0.0;

        int ultimaFila = ((ModeloTablaAlfombraPrincipal) jTable1.getModel()).getRowCount() - 1;
        Object o = ((ModeloTablaAlfombraPrincipal) jTable1.getModel()).getValueAt(ultimaFila, 6);
        String s = String.valueOf(o);
        double eventoHsMenor = Double.valueOf(s);
        tipoEvento = 6;

        for (int i = 3; i < 11; i++) {
            if (i == 5) {
                i = 9;
            } else {
                if (i == 3) {
                    o = ((ModeloTablaAlfombraPrincipal) jTable1.getModel()).getValueAt(ultimaFila, 3);//obtengo valor de la celda
                    s = String.valueOf(o);//paso a un string
                    aux = Double.parseDouble(s);//lo paso a un valor de double paracomparar
                    if (aux != 0) {
                        if (eventoHsMenor > aux) {
                            eventoHsMenor = aux;
                            tipoEvento = 3;
                        }
                    }
                } else {
                    if (i == 4) {
                        o = ((ModeloTablaAlfombraPrincipal) jTable1.getModel()).getValueAt(ultimaFila, i);//obtengo valor de la celda
                        s = String.valueOf(o);//paso a un string
                        aux = Double.parseDouble(s);//lo paso a un valor de double paracomparar
                        if (aux != 0) {
                            if (eventoHsMenor > aux) {
                                eventoHsMenor = aux;
                                tipoEvento = i;
                            }

                        }
                    } else {
                        if (i == 10) {
                            o = ((ModeloTablaAlfombraPrincipal) jTable1.getModel()).getValueAt(ultimaFila, 10);//obtengo valor de la celda
                            s = String.valueOf(o);//paso a un string
                            aux = Double.parseDouble(s);//lo paso a un valor de double paracomparar
                            if (aux != 0) {
                                if (eventoHsMenor > aux) {
                                    eventoHsMenor = aux;
                                    tipoEvento = 10;
                                }
                            }

                        }
                    }
                }
            }
        }
    return eventoHsMenor;
        }

    private void evaluarTipoEvento() {
        int eve=this.tipoEvento;
        switch (eve) {
            // Llegada de la proxima persona
            case 6: {
                 if (principal[0].getEstadoAlfombra().equals("Disponible")) {
                    if (principal[0].getNroPersona()!= 0) {
                        //Laalfombra esta disponible y hay personas Deslizandose en la alfombra.
                       
                        principal[1].setEvento("Llega Pers");
                        principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());
                        //eventos
                        principal[1].setInicioSuspencion(principal[0].getInicioSuspencion());
                        principal[1].setFinLimpieza(principal[0].getFinLimpieza());
                        double desde = mediaUniforme - desvioUniforme;
                        double hasta = mediaUniforme + desvioUniforme;
                        double proximaLlegada = Uniforme.getRdo(desde, hasta);
                        
                        principal[1].setRND(Uniforme.getRnd());
                        principal[1].setLlegaPersona(principal[1].getReloj() + proximaLlegada);

                        //Datos depersona proxima a Finalizar Deslizamiento
                        principal[1].setNroPersona(principal[0].getNroPersona());
                        principal[1].setHoraLlegoPers(principal[0].getHoraLlegoPers());
                        principal[1].setEstadoPers(principal[0].getEstadoPers());
                        principal[1].setFinDeslizaPers(principal[0].getFinDeslizaPers());
                        principal[1].setTiempoEspera(principal[0].getTiempoEspera());
                        //Fin de Datos pers
                        
                        //Datos 
                        principal[1].setColaPesrsEspera(principal[0].getColaPesrsEspera());
                        principal[1].setColaPersDeslizan(principal[0].getColaPersDeslizan()+1);
                        principal[1].setCantPersFinalizan(principal[0].getCantPersFinalizan());
                        principal[1].setCantPersEsperaron(principal[0].getCantPersEsperaron());        
                        principal[1].setMaxColaEspera(principal[0].getMaxColaEspera());
                        principal[1].setAcuTiempoEspera(principal[0].getAcuTiempoEspera());
                        principal[1].setMaxTiempoEspera(principal[0].getMaxTiempoEspera());

                        int ultimaFila = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getRowCount() - 1;
                        Object o = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(ultimaFila, 0);
                        String s = String.valueOf(o);
                        int ultimoNroPersona = Integer.valueOf(s);
                        
                        auxiliar[1].setNroPersona(ultimoNroPersona + 1);
                        auxiliar[1].setHoraLlego(principal[1].getReloj());
                        auxiliar[1].setEstadoPersna("Deslizando");
                        auxiliar[1].setEsperoEnCola("NO");
                        auxiliar[1].setFinDeslizamiento(principal[1].getReloj()+tiempoTardaLanzamiento);
                        auxiliar[1].setTiempoQueEspero(0);    
                    }
                    else{
                        //La alfombra esta Disponible y NO hay personas Deslizandose en la alfombra.
                          
                        principal[1].setEvento("Llega Pers");
                        principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());
                        //eventos
                        principal[1].setInicioSuspencion(principal[0].getInicioSuspencion());
                        principal[1].setFinLimpieza(principal[0].getFinLimpieza());
                        double desde = mediaUniforme - desvioUniforme;
                        double hasta = mediaUniforme + desvioUniforme;
                        double proximaLlegada = Uniforme.getRdo(desde, hasta);
                        principal[1].setRND(Uniforme.getRnd());
                        principal[1].setLlegaPersona(principal[1].getReloj() + proximaLlegada);
                        
                        int ultimaFila = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getRowCount() - 1;
                        Object o = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(ultimaFila, 0);
                        String s = String.valueOf(o);
                        int ultimoNroPersona = Integer.valueOf(s);
                        
                        //Datos Pers
                        principal[1].setNroPersona(ultimoNroPersona+1);
                        principal[1].setHoraLlegoPers(principal[1].getReloj());
                        principal[1].setEstadoPers("Deslizando");
                        principal[1].setFinDeslizaPers(principal[1].getHoraLlegoPers()+tiempoTardaLanzamiento);
                        principal[1].setTiempoEspera(0);
                        
                        principal[1].setColaPesrsEspera(principal[0].getColaPesrsEspera());
                        principal[1].setColaPersDeslizan(principal[0].getColaPersDeslizan()+1);
                        principal[1].setCantPersFinalizan(principal[0].getCantPersFinalizan());
                        principal[1].setCantPersEsperaron(principal[0].getCantPersEsperaron());        
                        principal[1].setMaxColaEspera(principal[0].getMaxColaEspera());
                        principal[1].setAcuTiempoEspera(principal[0].getAcuTiempoEspera());
                        principal[1].setMaxTiempoEspera(principal[0].getMaxTiempoEspera());

                        auxiliar[1].setNroPersona(ultimoNroPersona + 1);
                        auxiliar[1].setHoraLlego(principal[1].getReloj());
                        auxiliar[1].setEstadoPersna("Deslizando");
                        auxiliar[1].setEsperoEnCola("NO");
                        auxiliar[1].setFinDeslizamiento(principal[1].getReloj()+tiempoTardaLanzamiento);
                        auxiliar[1].setTiempoQueEspero(0);  
                                        }
                  }
                 else {
                     if (principal[0].getNroPersona()!= 0){
                       //La alfombra esta Suspendida y hay personas Deslizandose en la alfombra.
                        principal[1].setEvento("Llega Pers");
                        principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());
                        //eventos
                        principal[1].setInicioSuspencion(principal[0].getInicioSuspencion());
                        principal[1].setFinLimpieza(principal[0].getFinLimpieza());
                        double desde = mediaUniforme - desvioUniforme;
                        double hasta = mediaUniforme + desvioUniforme;
                        double proximaLlegada = Uniforme.getRdo(desde, hasta);
                        principal[1].setRND(Uniforme.getRnd());
                        principal[1].setLlegaPersona(principal[1].getReloj() + proximaLlegada);
                        //Datos depersona proxima a Finalizar Deslizamiento
                        principal[1].setNroPersona(principal[0].getNroPersona());
                        principal[1].setHoraLlegoPers(principal[0].getHoraLlegoPers());
                        principal[1].setEstadoPers(principal[0].getEstadoPers());
                        principal[1].setFinDeslizaPers(principal[0].getFinDeslizaPers());
                        principal[1].setTiempoEspera(principal[0].getTiempoEspera());
                        //Fin de Datos pers 
                        //Datos 
                        principal[1].setColaPesrsEspera(principal[0].getColaPesrsEspera()+1);
                        principal[1].setColaPersDeslizan(principal[0].getColaPersDeslizan());
                         principal[1].setCantPersFinalizan(principal[0].getCantPersFinalizan());
                         principal[1].setCantPersEsperaron(principal[0].getCantPersEsperaron() + 1);
                         if (principal[0].getMaxColaEspera() > principal[1].getColaPesrsEspera()) {
                             principal[1].setMaxColaEspera(principal[0].getMaxColaEspera());
                         } else {
                             principal[1].setMaxColaEspera(principal[1].getColaPesrsEspera());
                         }
                        principal[1].setAcuTiempoEspera(principal[0].getAcuTiempoEspera());
                        principal[1].setMaxTiempoEspera(principal[0].getMaxTiempoEspera());

                        int ultimaFila = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getRowCount() - 1;
                        Object o = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(ultimaFila, 0);
                        String s = String.valueOf(o);
                        int ultimoNroPersona = Integer.valueOf(s);
                        
                        auxiliar[1].setNroPersona(ultimoNroPersona + 1);
                        auxiliar[1].setHoraLlego(principal[1].getReloj());
                        auxiliar[1].setEstadoPersna("En espera");
                        auxiliar[1].setEsperoEnCola("SI");
                        auxiliar[1].setFinDeslizamiento(0);
                        auxiliar[1].setTiempoQueEspero(0);   
                         
                     }
                     else{
                         //La alfombra esta Suspendida y NO hay personas Deslizandose en la alfombra.
                        principal[1].setEvento("Llega Pers");
                        principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());
                        //eventos
                        principal[1].setInicioSuspencion(principal[0].getInicioSuspencion());
                        principal[1].setFinLimpieza(principal[0].getFinLimpieza());
                        double desde = mediaUniforme - desvioUniforme;
                        double hasta = mediaUniforme + desvioUniforme;
                        double proximaLlegada = Uniforme.getRdo(desde, hasta);
                        principal[1].setRND(Uniforme.getRnd());
                        principal[1].setLlegaPersona(principal[1].getReloj() + proximaLlegada);
                        //Datos depersona proxima a Finalizar Deslizamiento
                        principal[1].setNroPersona(principal[0].getNroPersona());
                        principal[1].setHoraLlegoPers(principal[0].getHoraLlegoPers());
                        principal[1].setEstadoPers(principal[0].getEstadoPers());
                        principal[1].setFinDeslizaPers(principal[0].getFinDeslizaPers());
                        principal[1].setTiempoEspera(principal[0].getTiempoEspera());
                        //Fin de Datos pers 
                        //Datos 
                        principal[1].setColaPesrsEspera(principal[0].getColaPesrsEspera()+1);
                        principal[1].setColaPersDeslizan(principal[0].getColaPersDeslizan());
                         principal[1].setCantPersFinalizan(principal[0].getCantPersFinalizan());
                         principal[1].setCantPersEsperaron(principal[0].getCantPersEsperaron() + 1);
                         if (principal[0].getMaxColaEspera() > principal[1].getColaPesrsEspera()) {
                             principal[1].setMaxColaEspera(principal[0].getMaxColaEspera());
                         } else {
                             principal[1].setMaxColaEspera(principal[1].getColaPesrsEspera());
                         }
                        principal[1].setAcuTiempoEspera(principal[0].getAcuTiempoEspera());
                        principal[1].setMaxTiempoEspera(principal[0].getMaxTiempoEspera());

                        int ultimaFila = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getRowCount() - 1;
                        Object o = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(ultimaFila, 0);
                        String s = String.valueOf(o);
                        int ultimoNroPersona = Integer.valueOf(s);
                        
                        auxiliar[1].setNroPersona(ultimoNroPersona + 1);
                        auxiliar[1].setHoraLlego(principal[1].getReloj());
                        auxiliar[1].setEstadoPersna("En espera");
                        auxiliar[1].setEsperoEnCola("SI");
                        auxiliar[1].setFinDeslizamiento(0);
                        auxiliar[1].setTiempoQueEspero(0); 
                     }
                 }
                 
                            try {
                                ((ModeloTablaAlfombraPrincipal) this.jTable1.getModel()).anhadeFila(principal[1]);

                            } catch (Exception e) {
                                System.out.println("ERROR!!!11" + e.getMessage());
                            }

                            try {

                                ((ModeloTablaPersonaAuxiliar) this.jTable2.getModel()).agregarObjeto(auxiliar[1]);
                            } catch (Exception e) {
                                System.out.println("ERROR!!!22" + e.getMessage());
                            } 
               break; }
                
        
    case 10: {
        
        int filaPersonaEspera= ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).rowPersonaFIFO(principal[0].getCantPersFinalizan()+1);
        Object oEspera = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(filaPersonaEspera, 3);
        String sEspera = String.valueOf(oEspera);
        String espero = String.valueOf(sEspera);
        if(espero.equals("NO")){
        // //Finalizo un lanzamiento de persona en alfombra
        if (principal[0].getEstadoAlfombra().equals("Disponible")) {
            if (principal[0].getColaPersDeslizan()> 1) {
                // Alfombra esta disponible y hay cola en personas lanzando - hay que recalcular prox fin lanzamiento
                
                principal[1].setEvento("Fin Desliz");
                principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());
                principal[1].setInicioSuspencion(principal[0].getInicioSuspencion());
                principal[1].setFinLimpieza(principal[0].getFinLimpieza());
                principal[1].setRND(principal[0].getRND());
                principal[1].setLlegaPersona(principal[0].getLlegaPersona());
                
                int filaPersona= ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).rowPersonaFIFO(principal[0].getNroPersona()+1);
                Object o = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(filaPersona, 0);
                String s = String.valueOf(o);
                int nroPersona = Integer.valueOf(s);
                             
                
                principal[1].setNroPersona(nroPersona);
                Object o1 = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(filaPersona, 1);
                String s1 = String.valueOf(o1);
                double horaLlego = Double.valueOf(s1);
                principal[1].setHoraLlegoPers(horaLlego);
                principal[1].setEstadoPers("Deslizando");
                principal[1].setFinDeslizaPers(principal[1].getHoraLlegoPers()+tiempoTardaLanzamiento);
                principal[1].setTiempoEspera(0);
                
                auxiliar[1].setNroPersona(principal[0].getNroPersona());
                int filaPersona1= ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).rowPersonaFIFO(principal[0].getNroPersona());
                Object o2 = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(filaPersona1, 1);
                String s2 = String.valueOf(o2);
                double horaLlego1 = Double.valueOf(s2);
                
                auxiliar[1].setHoraLlego(horaLlego1);
                auxiliar[1].setEstadoPersna("Finaliza");
                auxiliar[1].setEsperoEnCola("NO");
                auxiliar[1].setFinDeslizamiento(principal[1].getReloj());
                auxiliar[1].setTiempoQueEspero(0); 
                //
                principal[1].setColaPesrsEspera(principal[0].getColaPesrsEspera());
                    principal[1].setColaPersDeslizan(principal[0].getColaPersDeslizan() - 1);
                    principal[1].setCantPersFinalizan(principal[0].getCantPersFinalizan() + 1);
                    principal[1].setCantPersEsperaron(principal[0].getCantPersEsperaron());
                    principal[1].setMaxColaEspera(principal[0].getMaxColaEspera());
                    principal[1].setAcuTiempoEspera(principal[0].getAcuTiempoEspera());
                    principal[1].setMaxTiempoEspera(principal[0].getMaxTiempoEspera());
                    try {
                        ((ModeloTablaAlfombraPrincipal) this.jTable1.getModel()).anhadeFila(principal[1]);

                    } catch (Exception e) {
                        System.out.println("ERROR!!!11" + e.getMessage());
                    }

                    try {

                        ((ModeloTablaPersonaAuxiliar) this.jTable2.getModel()).setValue(auxiliar[1], filaPersona1, 0);
                    } catch (Exception e) {
                        System.out.println("ERROR!!!22" + e.getMessage());
                    }


                } else {
                    //Alfombre esta disponible y no hay cola - pone en 0 los datos de pers prox a lanzar
                    principal[1].setEvento("Fin Desliz");
                    principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());
                    principal[1].setInicioSuspencion(principal[0].getInicioSuspencion());
                    principal[1].setFinLimpieza(principal[0].getFinLimpieza());
                    principal[1].setRND(principal[0].getRND());
                    principal[1].setLlegaPersona(principal[0].getLlegaPersona());



                    principal[1].setNroPersona(0);
                    principal[1].setHoraLlegoPers(0);
                    principal[1].setEstadoPers("-");
                    principal[1].setFinDeslizaPers(0);
                    principal[1].setTiempoEspera(0);

                    auxiliar[1].setNroPersona(principal[0].getNroPersona());
                    int filaPersona1 = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).rowPersonaFIFO(principal[0].getNroPersona());
                    Object o2 = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(filaPersona1, 1);
                    String s2 = String.valueOf(o2);
                    double horaLlego1 = Double.valueOf(s2);

                    auxiliar[1].setHoraLlego(horaLlego1);
                    auxiliar[1].setEstadoPersna("Finaliza");
                    auxiliar[1].setEsperoEnCola("NO");
                    auxiliar[1].setFinDeslizamiento(principal[1].getReloj());
                    auxiliar[1].setTiempoQueEspero(0);
                    //
                    principal[1].setColaPesrsEspera(principal[0].getColaPesrsEspera());
                    principal[1].setColaPersDeslizan(principal[0].getColaPersDeslizan() - 1);
                    principal[1].setCantPersFinalizan(principal[0].getCantPersFinalizan() + 1);
                    principal[1].setCantPersEsperaron(principal[0].getCantPersEsperaron());
                    principal[1].setMaxColaEspera(principal[0].getMaxColaEspera());
                    principal[1].setAcuTiempoEspera(principal[0].getAcuTiempoEspera());
                    principal[1].setMaxTiempoEspera(principal[0].getMaxTiempoEspera());
                    try {
                        ((ModeloTablaAlfombraPrincipal) this.jTable1.getModel()).anhadeFila(principal[1]);

                    } catch (Exception e) {
                        System.out.println("ERROR!!!11" + e.getMessage());
                    }

                    try {

                        ((ModeloTablaPersonaAuxiliar) this.jTable2.getModel()).setValue(auxiliar[1], filaPersona1, 0);
                    } catch (Exception e) {
                        System.out.println("ERROR!!!22" + e.getMessage());
                    }

                }
            } else {

                if (principal[0].getColaPersDeslizan()> 1) {
                    //Alfombra esta SUSPENDIDA Y hay personas deslizandose por la alfombra- sube datos de  prox lanzamiento
                    principal[1].setEvento("Fin Desliz");
                    principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());
                    principal[1].setInicioSuspencion(principal[0].getInicioSuspencion());
                    principal[1].setFinLimpieza(principal[0].getFinLimpieza());
                    principal[1].setRND(principal[0].getRND());
                    principal[1].setLlegaPersona(principal[0].getLlegaPersona());

                    int filaPersona = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).rowPersonaFIFO(principal[0].getNroPersona() + 1);
                    Object o = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(filaPersona, 0);
                    String s = String.valueOf(o);
                    int nroPersona = Integer.valueOf(s);
                    principal[1].setNroPersona(nroPersona);
                    Object o1 = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(filaPersona, 1);
                    String s1 = String.valueOf(o1);
                    double horaLlego = Double.valueOf(s1);
                    principal[1].setHoraLlegoPers(horaLlego);
                    principal[1].setEstadoPers("Deslizando");
                    principal[1].setFinDeslizaPers(principal[1].getHoraLlegoPers() + tiempoTardaLanzamiento);
                    principal[1].setTiempoEspera(0);

                    auxiliar[1].setNroPersona(principal[0].getNroPersona());
                    int filaPersona1 = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).rowPersonaFIFO(principal[0].getNroPersona());
                    Object o2 = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(filaPersona1, 1);
                    String s2 = String.valueOf(o2);
                    double horaLlego1 = Double.valueOf(s2);

                    auxiliar[1].setHoraLlego(horaLlego1);
                    auxiliar[1].setEstadoPersna("Finaliza");
                    auxiliar[1].setEsperoEnCola("NO");
                    auxiliar[1].setFinDeslizamiento(principal[1].getReloj());
                    auxiliar[1].setTiempoQueEspero(0);
                    //
                    principal[1].setColaPesrsEspera(principal[0].getColaPesrsEspera());
                    principal[1].setColaPersDeslizan(principal[0].getColaPersDeslizan() - 1);
                    principal[1].setCantPersFinalizan(principal[0].getCantPersFinalizan() + 1);
                    principal[1].setCantPersEsperaron(principal[0].getCantPersEsperaron());
                    principal[1].setMaxColaEspera(principal[0].getMaxColaEspera());
                    principal[1].setAcuTiempoEspera(principal[0].getAcuTiempoEspera());
                    principal[1].setMaxTiempoEspera(principal[0].getMaxTiempoEspera());
                    try {
                        ((ModeloTablaAlfombraPrincipal) this.jTable1.getModel()).anhadeFila(principal[1]);

                    } catch (Exception e) {
                        System.out.println("ERROR!!!11" + e.getMessage());
                    }

                    try {

                        ((ModeloTablaPersonaAuxiliar) this.jTable2.getModel()).setValue(auxiliar[1], filaPersona1, 0);
                    } catch (Exception e) {
                        System.out.println("ERROR!!!22" + e.getMessage());
                    }

                } else {
                    // la alfombra suspendida y no hay personas deslizandose. calcula los EVENTOS PROXIMOS DE FIN LIMPIEZA Y NVA SUSPENCION
                    principal[1].setEvento("Fin Desliz");
                    principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());

                    principal[1].setFinLimpieza(principal[1].getReloj() + tiempoLimpieza);
                    principal[1].setInicioSuspencion(principal[1].getFinLimpieza() + tiempoSuspension);
                    principal[1].setRND(principal[0].getRND());
                    principal[1].setLlegaPersona(principal[0].getLlegaPersona());

                    principal[1].setNroPersona(0);
                    principal[1].setHoraLlegoPers(0);
                    principal[1].setEstadoPers("-");
                    principal[1].setFinDeslizaPers(0);
                    principal[1].setTiempoEspera(0);

                    auxiliar[1].setNroPersona(principal[0].getNroPersona());
                    int filaPersona1 = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).rowPersonaFIFO(principal[0].getNroPersona());
                    Object o2 = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(filaPersona1, 1);
                    String s2 = String.valueOf(o2);
                    double horaLlego1 = Double.valueOf(s2);

                    auxiliar[1].setHoraLlego(horaLlego1);
                    auxiliar[1].setEstadoPersna("Finaliza");
                    auxiliar[1].setEsperoEnCola("NO");
                    auxiliar[1].setFinDeslizamiento(principal[1].getReloj());
                    auxiliar[1].setTiempoQueEspero(0);
                    //
                    principal[1].setColaPesrsEspera(principal[0].getColaPesrsEspera());
                    principal[1].setColaPersDeslizan(principal[0].getColaPersDeslizan() - 1);
                    principal[1].setCantPersFinalizan(principal[0].getCantPersFinalizan() + 1);
                    principal[1].setCantPersEsperaron(principal[0].getCantPersEsperaron());
                    principal[1].setMaxColaEspera(principal[0].getMaxColaEspera());
                    principal[1].setAcuTiempoEspera(principal[0].getAcuTiempoEspera());
                    principal[1].setMaxTiempoEspera(principal[0].getMaxTiempoEspera());
                    try {
                        ((ModeloTablaAlfombraPrincipal) this.jTable1.getModel()).anhadeFila(principal[1]);

                    } catch (Exception e) {
                        System.out.println("ERROR!!!11" + e.getMessage());
                    }

                    try {

                        ((ModeloTablaPersonaAuxiliar) this.jTable2.getModel()).setValue(auxiliar[1], filaPersona1, 0);
                    } catch (Exception e) {
                        System.out.println("ERROR!!!22" + e.getMessage());
                    }
                }
            }
        } else {//Fin deslizamiento y hay 
//        
            int r =((ModeloTablaPersonaAuxiliar) this.jTable2.getModel()).getRowCount()-filaPersonaEspera;
            for(int i=1;i<(r+1);i++){
            //while (principal[0].getNroPersona()!=0 ) {

                //datos eventos 
                principal[1].setEvento("Fin Desliz");
                principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());

                principal[1].setFinLimpieza(principal[0].getFinLimpieza());
                principal[1].setInicioSuspencion(principal[0].getInicioSuspencion());
                principal[1].setRND(principal[0].getRND());
                principal[1].setLlegaPersona(principal[0].getLlegaPersona());

                //recalculo cola acu..
                principal[1].setColaPesrsEspera(principal[0].getColaPesrsEspera());
                principal[1].setColaPersDeslizan(principal[0].getColaPersDeslizan() - 1);
                principal[1].setCantPersFinalizan(principal[0].getCantPersFinalizan() + 1);
                principal[1].setCantPersEsperaron(principal[0].getCantPersEsperaron());
                principal[1].setMaxColaEspera(principal[0].getMaxColaEspera());
                principal[1].setAcuTiempoEspera(principal[0].getAcuTiempoEspera() + principal[0].getTiempoEspera());
                if (principal[0].getTiempoEspera() > principal[0].getMaxTiempoEspera()) {
                    principal[1].setMaxTiempoEspera(principal[0].getTiempoEspera());
                } else {
                    principal[1].setMaxTiempoEspera(principal[0].getMaxTiempoEspera());
                }

                //actualizo persona a Fin
                ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).setEstado("Finaliza", filaPersonaEspera);
                //tomo perspna prx y copio datos al principal

                if (principal[1].getColaPersDeslizan()>0) {
                    Object oHora = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(filaPersonaEspera + 1, 1);
                    String sHora = String.valueOf(oHora);
                    Double hora = Double.valueOf(sHora);
                    principal[1].setNroPersona(principal[0].getNroPersona() + 1);
                    principal[1].setHoraLlegoPers(hora);
                    principal[1].setEstadoPers("En Lanzamiento");
                    principal[1].setFinDeslizaPers(principal[1].getReloj());
                    principal[1].setTiempoEspera(principal[1].getReloj() - tiempoTardaLanzamiento - hora);
                    filaPersonaEspera++;
//                    Object oEspero = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(filaPersonaEspera, 3);
//                    String sEspero = String.valueOf(oEspero);
//                    espero = String.valueOf(sEspero);
                } else {
                    principal[1].setNroPersona(0);
                    principal[1].setHoraLlegoPers(0);
                    principal[1].setEstadoPers("-");
                    principal[1].setFinDeslizaPers(0);
                    principal[1].setTiempoEspera(0);
                    filaPersonaEspera++;
                    //espero = "";
                }
                //agrego la fla a frincipal
                ((ModeloTablaAlfombraPrincipal) this.jTable1.getModel()).anhadeFila(principal[1]);

                //crear Nvo verctores de copiar todo a√± [0]; luego crear un nuevo en principal[1]  y darle valor a [1]reloj 
                if(principal[1].getNroPersona()!=0){copiarDatosHistoricos();
                principal[1] = new AlfombraPrincipal();
                principal[1].setReloj(principal[0].getReloj());
                }
            
            }
        }
                 
                break;
            }

            case 4: {
                //Fin Limpieza

                principal[1].setEvento("Fin Limpieza");
                principal[1].setEstadoAlfombra("Disponible");
                principal[1].setInicioSuspencion(principal[0].getInicioSuspencion());
                principal[1].setFinLimpieza(0);
                principal[1].setRND(principal[0].getRND());
                principal[1].setLlegaPersona(principal[0].getLlegaPersona());
                if (principal[0].getColaPesrsEspera() != 0) { // hay PERSONAS ESPERANDO PARA DESLIZARSE???

                    int primerFilaEspera = ((ModeloTablaPersonaAuxiliar) this.jTable2.getModel()).rowPersonaEspera();//BUSCA PRIMERA PERSONA QUE ESPERA
                    Object o1 = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(primerFilaEspera, 0);
                    String s1 = String.valueOf(o1);
                    int nroPers = Integer.valueOf(s1);
                    principal[1].setNroPersona(nroPers);
                    Object o2 = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(primerFilaEspera, 1);
                    String s2 = String.valueOf(o2);
                    double horaLlego1 = Double.valueOf(s2);
                    principal[1].setHoraLlegoPers(horaLlego1);
                    principal[1].setEstadoPers("Deslizando");
                    principal[1].setFinDeslizaPers(principal[1].getReloj() + tiempoTardaLanzamiento);
                    principal[1].setTiempoEspera(principal[1].getReloj() - principal[1].getHoraLlegoPers());

                    auxiliar[1].setNroPersona(nroPers);
                    auxiliar[1].setHoraLlego(horaLlego1);
                    auxiliar[1].setEstadoPersna("Deslizando");
                    auxiliar[1].setEsperoEnCola("SI");
                    auxiliar[1].setFinDeslizamiento(principal[1].getReloj() + tiempoTardaLanzamiento);
                    auxiliar[1].setTiempoQueEspero(principal[1].getReloj() - auxiliar[1].getHoraLlego());
                    try {

                        ((ModeloTablaPersonaAuxiliar) this.jTable2.getModel()).setValue(auxiliar[1], primerFilaEspera, 0);
                    } catch (Exception e) {
                        System.out.println("ERROR!!!22" + e.getMessage());
                    }
                    principal[1].setColaPesrsEspera(0);
                    principal[1].setColaPersDeslizan(principal[0].getColaPesrsEspera());
                    principal[1].setCantPersFinalizan(principal[0].getCantPersFinalizan());
                    principal[1].setCantPersEsperaron(principal[0].getCantPersEsperaron());
                    principal[1].setMaxColaEspera(principal[0].getMaxColaEspera());
                    principal[1].setAcuTiempoEspera(principal[0].getAcuTiempoEspera());
                    principal[1].setMaxTiempoEspera(principal[0].getMaxTiempoEspera());
                    if (principal[0].getColaPesrsEspera() > 1) {
                        // si hay mas de una persona esperando, hay que actualizar su estado a deslizado una vez q finalizo la limpieza
                        for (int j = 1; j < principal[0].getColaPesrsEspera(); j++) {
                            auxiliar[1] = new PersonasAuxiliar();
                            //int jFilaEspera = ((ModeloTablaPersonaAuxiliar) this.jTable2.getModel()).rowPersonaEspera() + j;
                            Object oj = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(primerFilaEspera + j, 0);
                            String sj = String.valueOf(oj);
                            int nroPersj = Integer.valueOf(sj);
                            auxiliar[1].setNroPersona(nroPersj);
                            Object oj1 = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(primerFilaEspera + j, 1);
                            String sj1 = String.valueOf(oj1);
                            double horaLLego2 = Double.valueOf(sj1);
                            auxiliar[1].setHoraLlego(horaLLego2);
                            auxiliar[1].setEstadoPersna("Deslizando");
                            auxiliar[1].setEsperoEnCola("SI");
                            auxiliar[1].setFinDeslizamiento(principal[1].getReloj() + tiempoTardaLanzamiento);
                            auxiliar[1].setTiempoQueEspero(principal[1].getReloj() - auxiliar[1].getHoraLlego());
                            try {

                                ((ModeloTablaPersonaAuxiliar) this.jTable2.getModel()).setValue(auxiliar[1], primerFilaEspera + j, 0);
                            } catch (Exception e) {
                                System.out.println("ERROR!!!22" + e.getMessage());
                            }
                        }
                    }
                } else {
                    principal[1].setNroPersona(principal[0].getNroPersona());
                    principal[1].setHoraLlegoPers(principal[0].getHoraLlegoPers());
                    principal[1].setEstadoPers(principal[0].getEstadoPers());
                    principal[1].setFinDeslizaPers(principal[0].getFinDeslizaPers());
                    principal[1].setTiempoEspera(principal[0].getTiempoEspera());
                    principal[1].setColaPesrsEspera(principal[0].getColaPesrsEspera());
                    principal[1].setColaPersDeslizan(principal[0].getColaPersDeslizan());
                    principal[1].setCantPersFinalizan(principal[0].getCantPersFinalizan());
                    principal[1].setCantPersEsperaron(principal[0].getCantPersEsperaron());
                    principal[1].setMaxColaEspera(principal[0].getMaxColaEspera());
                    principal[1].setAcuTiempoEspera(principal[0].getAcuTiempoEspera());
                    principal[1].setMaxTiempoEspera(principal[0].getMaxTiempoEspera());
                }
                try {
                        ((ModeloTablaAlfombraPrincipal) this.jTable1.getModel()).anhadeFila(principal[1]);

                    } catch (Exception e) {
                        System.out.println("ERROR!!!11" + e.getMessage());
                    }
               
                break;
            }
case 3: {// Es hora de suspender el lanzamiento de personas en alfombra
     
        principal[1].setEvento("Suspende");
          principal[1].setEstadoAlfombra("Suspendida");
      
        if (principal[0].getNroPersona() != 0) //hay gente deslizandose en la alfombra. NO se puede calcular la limpieza
        {
            principal[1].setFinLimpieza(0);
              principal[1].setInicioSuspencion(0);
        } else//No hay gente deslizandose en la alfombra. se puede calcular LIMPIEZA
        {
            principal[1].setFinLimpieza(principal[1].getReloj()+tiempoLimpieza);
              principal[1].setInicioSuspencion(principal[1].getFinLimpieza()+tiempoSuspension);
            
        }
        principal[1].setRND(principal[0].getRND());
        principal[1].setLlegaPersona(principal[0].getLlegaPersona());

        principal[1].setNroPersona(principal[0].getNroPersona());
        principal[1].setHoraLlegoPers(principal[0].getHoraLlegoPers());
        principal[1].setEstadoPers(principal[0].getEstadoPers());
        principal[1].setFinDeslizaPers(principal[0].getFinDeslizaPers());
        principal[1].setTiempoEspera(principal[0].getTiempoEspera());
        
        principal[1].setColaPesrsEspera(principal[0].getColaPesrsEspera());
        principal[1].setColaPersDeslizan(principal[0].getColaPersDeslizan());
        principal[1].setCantPersFinalizan(principal[0].getCantPersFinalizan());
        principal[1].setCantPersEsperaron(principal[0].getCantPersEsperaron());        
        principal[1].setMaxColaEspera(principal[0].getMaxColaEspera());
        principal[1].setAcuTiempoEspera(principal[0].getAcuTiempoEspera());
        principal[1].setMaxTiempoEspera(principal[0].getMaxTiempoEspera());
                try {
                    ((ModeloTablaAlfombraPrincipal) this.jTable1.getModel()).anhadeFila(principal[1]);
                } catch (Exception e) {
                    System.out.println("ERROR!!!" + e.getMessage());
                }
                }
                break;
            }
        }
    private void limpiarValoresPrevios() {
    mediaUniforme=0;
    desvioUniforme=0;
    tiempoSuspension=0;
    tiempoLimpieza=0;
    tiempoTardaLanzamiento=0;
    cantidadSegundosASimular=0;
    Integer cantidadIteracione=0;
    AlfombraPrincipal principal[] = new AlfombraPrincipal[2];
    PersonasAuxiliar auxiliar[] = new PersonasAuxiliar[2];
    tipoEvento = 0;
    promPorc = 0;
    promMaxCola = 0;
    promMaxTiempo = 0;
        this.jTable2.removeAll();
        this.jTable2.removeEditor();
    //jTable2.setModel(new Estructura.ModeloTablaPersonaAuxiliar());
        this.jTable1.removeAll();
        this.jTable1.removeEditor();
       
        //jTable1.setModel(new Estructura.ModeloTablaAlfombraPrincipal());
             }
     private boolean tomarValoresIngresadosEuler() {
        if (!textField1.getText().trim().equals("") && Double.parseDouble(textField1.getText()) != -1) {
        euler.setX0(Double.parseDouble(textField1.getText()));
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un valor inicial de Xo.", "Faltan datos", JOptionPane.ERROR_MESSAGE);
            textField1.requestFocus();
            return false;
        }
        if (!textField2.getText().trim().equals("") && Double.parseDouble(textField2.getText()) != 0) {
           euler.setY0(Double.parseDouble(textField2.getText()));
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un valor inicial de Yo.", "Faltan datos", JOptionPane.ERROR_MESSAGE);
            textField2.requestFocus();
            return false;
        }
        if (!textField3.getText().trim().equals("") && Double.parseDouble(textField3.getText()) != 0) {
            euler.setH(Double.parseDouble(textField3.getText()));
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un valor inicial de h.", "Faltan datos", JOptionPane.ERROR_MESSAGE);
            textField3.requestFocus();
            return false;
        }
        return true;
    }
 
        private void limpiarValoresPreviosEuler() {
     y0 = 0;
     x0 = 0;
     xfinal = 0;
     h = 0;
     
     //((modeloTablaEuler) this.jTable2.getModel()).anhadeFila(aux[1]);
//     MetodoEuler.jTable2.removeAll();
//     MetodoEuler.jTable2.removeEditor();
     
             }
//    public public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//
//
//
//
//
//
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Principal.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Principal.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Principal.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Principal.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Principal().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private javax.swing.JFormattedTextField textField1;
    private javax.swing.JFormattedTextField textField2;
    private javax.swing.JFormattedTextField textField3;
    // End of variables declaration//GEN-END:variables
 public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MetodoEuler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MetodoEuler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MetodoEuler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MetodoEuler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
}
