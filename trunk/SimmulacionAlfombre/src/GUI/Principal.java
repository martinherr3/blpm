/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Estructura.ModeloTablaAlfombraPrincipal;
import Estructura.ModeloTablaPersonaAuxiliar;
import Objetos.AlfombraPrincipal;
import Objetos.PersonasAuxiliar;
import Objetos.Uniforme;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;

/**
 *
 * @author Bel√©n
 */
public class Principal extends javax.swing.JFrame {

    private static double mediaUniforme;
    private static double desvioUniforme;
    private static double tiempoSuspension;
    private static double tiempoLimpieza;
    private static Double tiempoTardaLanzamiento;
    private static Double cantidadSegundosASimular;
    private static Integer cantidadIteracione;
    private static AlfombraPrincipal principal[] = new AlfombraPrincipal[2];
    private static PersonasAuxiliar auxiliar[] = new PersonasAuxiliar[2];
    private int tipoEvento = 0;
    private double cantidadSegundosSimular;

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable2.setModel(new ModeloTablaPersonaAuxiliar());
        jScrollPane3.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(431, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jPanel1.setName("aaa"); // NOI18N

        jLabel1.setText("Llega una persona(Uniforme) Media:");

        jTextField1.setText("180");

        jLabel2.setText("segundos +/-");

        jTextField2.setText("5");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Se suspende tiradas cada:");

        jTextField3.setText("14400 ");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel4.setText("segundos");

        jLabel5.setText("Limpieza dura:");

        jTextField4.setText("900 ");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jLabel6.setText("segundos");

        jButton1.setText("Simular");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Cantidad Segundo a simular:");

        jTextField5.setText("144000");
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel8.setText("Cantidad de iteraciones a simular:");

        jTextField6.setText("900 ");
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 424, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addGap(46, 46, 46))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1036, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(183, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        tomarValoresIngresados();
        inicializarSimulacion();


        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public void setTiempoTardaLanzamiento(double Xfinal) {
        this.tiempoTardaLanzamiento = Xfinal;
    }

    private void tomarValoresIngresados() {
        if (!jTextField1.getText().equals("")) {
            mediaUniforme = Double.parseDouble(jTextField1.getText());
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un valor inicial de la media.", "Faltan datos", JOptionPane.ERROR_MESSAGE);
            jTextField1.requestFocus();
        }
        if (!jTextField2.getText().equals("")) {
            desvioUniforme = Double.parseDouble(jTextField2.getText());
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un valor inicial del Desvio.", "Faltan datos", JOptionPane.ERROR_MESSAGE);
            jTextField2.requestFocus();
        }
        if (!jTextField3.getText().equals("")) {
            tiempoSuspension = Double.parseDouble(jTextField3.getText());
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un valor inicial de tiempo para que se encuentra disponible la alfonbra.", "Faltan datos", JOptionPane.ERROR_MESSAGE);
            jTextField3.requestFocus();
        }
        if (!jTextField4.getText().equals("")) {
            tiempoLimpieza = Double.parseDouble(jTextField4.getText());
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un valor inicial del Tarda la limpieza.", "Faltan datos", JOptionPane.ERROR_MESSAGE);
            jTextField4.requestFocus();
        }
        if (!jTextField5.getText().equals("")) {
            cantidadSegundosASimular = Double.parseDouble(jTextField5.getText());
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un valor inicial de segundos a simular.", "Faltan datos", JOptionPane.ERROR_MESSAGE);
            jTextField5.requestFocus();
        }
        if (!jTextField6.getText().equals("")) {
            cantidadIteracione = Integer.parseInt(jTextField6.getText());
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un valor inicial de la cantidad de simulaciones a iterar.", "Faltan datos", JOptionPane.ERROR_MESSAGE);
            jTextField6.requestFocus();
        }


    }

    private void inicializarSimulacion() {
        for (int k = 0; k < 2; k++) {
            principal[k] = new AlfombraPrincipal();
            auxiliar[k] = new PersonasAuxiliar();
        }

        principal[1].setReloj(0);
        principal[1].setEvento("Inicio Simulaci√≥n");

        double desde = (double) (mediaUniforme - desvioUniforme);
        double hasta = (double) (mediaUniforme - desvioUniforme);
        principal[1].setLLegaProxPers(Uniforme.getRdo(desde, hasta));
        principal[1].setRND(Uniforme.getRnd());

        principal[1].setFinLimpieza(0);

        principal[1].setEsHoraSuspender(0);

        principal[1].setNroPersProxFinLanz(0);
        principal[1].setFinProxLanz(0);

        principal[1].setCantPersEnLanz(0);

        principal[1].setEstadoAlfombra("Disponible");
        principal[1].setMaxCola(0);
        principal[1].setMaxTiempoDEspera(0);

        ((ModeloTablaAlfombraPrincipal) this.jTable1.getModel()).anhadeFila(principal[1]);
        // Component c= ((MTTablaPrincipalDeEventos)this.tablaPrincipal.getModel()).getTableCellRendererComponent(tablaPrincipal,null,false,false,0,3);

        auxiliar[1].setNroPersona(0);
        auxiliar[1].setTiempoLlegada(0);
        auxiliar[1].setEstado(" ");
        auxiliar[1].setFinLanza(0);
        auxiliar[1].setTiempoEspera(0);

        ((ModeloTablaPersonaAuxiliar) this.jTable2.getModel()).agregarObjeto(auxiliar[1]);

        while (principal[1].getReloj() < this.cantidadSegundosASimular) {
            copiarDatosHistoricos();

            principal[1] = new AlfombraPrincipal();
            auxiliar[1] = new PersonasAuxiliar();


            double eventoMenorHs = cualEsElProximoEvento();
            principal[1].setReloj(eventoMenorHs);
            if (eventoMenorHs > this.cantidadSegundosSimular) {
                break;
            }
            evaluarTipoEvento(tipoEvento);

        }

        //((ModeloTablaPersonaAuxiliar) this.jTable2.getModel()).copiarSumatoria();

        //calcularPromedios();


    }

    private void copiarDatosHistoricos() {
        principal[0].setReloj(principal[1].getReloj());
        // no hace falta que guarde el evento
        principal[0].setEvento(principal[1].getEvento());
        principal[0].setRND(principal[1].getRND());
        principal[0].setLLegaProxPers(principal[1].getLLegaProxPers());
        //No hace falta guardar los datos de si se debe repintar o no
        principal[0].setFinLimpieza(principal[1].getFinLimpieza());
        principal[0].setEsHoraSuspender(principal[1].getEsHoraSuspender());
        principal[0].setNroPersProxFinLanz(principal[1].getNroPersProxFinLanz());
        principal[0].setFinProxLanz(principal[1].getFinProxLanz());



        auxiliar[0].setNroPersona(auxiliar[1].getNroPersona());
        auxiliar[0].setTiempoLlegada(auxiliar[1].getTiempoLlegada());
        auxiliar[0].setEstado(auxiliar[1].getEstado());
        auxiliar[0].setFinLanza(auxiliar[1].getFinLanza());
        auxiliar[0].setTiempoEspera(auxiliar[1].getTiempoEspera());
    }

    private double cualEsElProximoEvento() {
        Double eventoHsMenor = 0.0;
        Double aux = 0.0;

        int ultimaFila = ((ModeloTablaAlfombraPrincipal) jTable1.getModel()).getRowCount() - 1;
        Object o = ((ModeloTablaAlfombraPrincipal) jTable1.getModel()).getValueAt(ultimaFila, 7);
        String s = String.valueOf(o);
        eventoHsMenor = Double.valueOf(s);
        tipoEvento = 7;

        for (int i = 3; i < 7; i++) {


            //  if (i != 6) {
            if (i == 3) {
                o = ((ModeloTablaAlfombraPrincipal) jTable1.getModel()).getValueAt(ultimaFila, i);//obtengo valor de la celda
                s = String.valueOf(o);//paso a un string
                aux = Double.parseDouble(s);//lo paso a un valor de double paracomparar
                if (aux != 0) {
                    if (eventoHsMenor > aux) {
                        eventoHsMenor = aux;
                        tipoEvento = i;
                    }
                }
            } else {
                if (i == 4) {
                    o = ((ModeloTablaAlfombraPrincipal) jTable1.getModel()).getValueAt(ultimaFila, i);//obtengo valor de la celda
                    s = String.valueOf(o);//paso a un string
                    aux = Double.parseDouble(s);//lo paso a un valor de double paracomparar
                    if (aux != 0) {
                        if (eventoHsMenor > aux) {
                            eventoHsMenor = aux;
                            tipoEvento = i;
                        }

                    }
                } else {
                    if (i == 5) {
                        o = ((ModeloTablaAlfombraPrincipal) jTable1.getModel()).getValueAt(ultimaFila, i);//obtengo valor de la celda
                        s = String.valueOf(o);//paso a un string
                        aux = Double.parseDouble(s);//lo paso a un valor de double paracomparar
                        if (aux != 0) {
                            if (eventoHsMenor > aux) {
                                eventoHsMenor = aux;
                                tipoEvento = i;
                            }
                        }
                    } else {
                        o = ((ModeloTablaAlfombraPrincipal) jTable1.getModel()).getValueAt(ultimaFila, i);//obtengo valor de la celda
                        s = String.valueOf(o);//paso a un string
                        aux = Double.parseDouble(s);//lo paso a un valor de double paracomparar
                        if (aux != 0) {
                            if (eventoHsMenor > aux) {
                                eventoHsMenor = aux;
                                tipoEvento = i;
                            }
                        }
                    }
                }
            }
        }
        // }

        return eventoHsMenor;
    }

    private void evaluarTipoEvento(int tipoEvento) {
        switch (tipoEvento) {
            // Llegada de la proxima persona
            case 3: {
                principal[1].setEvento("Llega Persona");
                double desde = mediaUniforme - desvioUniforme;
                double hasta = mediaUniforme + desvioUniforme;
                double proximaLlegada = Uniforme.getRdo(desde, hasta);
                principal[1].setRND(Uniforme.getRnd());
                principal[1].setLLegaProxPers(proximaLlegada);
                principal[1].setEsHoraSuspender(principal[0].getEsHoraSuspender());
                principal[1].setFinLimpieza(principal[0].getFinLimpieza());

                if (principal[0].getEstadoAlfombra() != "Suspendida") {

                    if (principal[0].getCantPersEnLanz() > 0) {
                        // Alfombra esta disponible y hay personas lanzando
                        principal[1].setNroPersProxFinLanz(principal[0].getNroPersProxFinLanz());
                        principal[1].setFinProxLanz(principal[0].getFinProxLanz());
                        principal[1].setCantPersEnLanz(principal[0].getCantPersEnLanz() + 1);
                        principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());
                        principal[1].setMaxCola(principal[0].getMaxCola());
                        principal[1].setMaxTiempoDEspera(principal[0].getMaxTiempoDEspera());

                        int ultimaFila = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getRowCount() - 1;
                        Object o = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(ultimaFila, 1);
                        String s = String.valueOf(o);
                        int ultimoNroPersona = Integer.valueOf(s);

                        auxiliar[1].setNroPersona(ultimoNroPersona + 1);
                        auxiliar[1].setTiempoLlegada(principal[1].getReloj());
                        auxiliar[1].setEstado("En Lanzamiento");
                        auxiliar[1].setFinLanza(0);
                        auxiliar[1].setTiempoEspera(0);
                    } else {
                        //// Alfombra esta disponible y no hay personas lanzando
                        principal[1].setCantPersEnLanz(principal[0].getCantPersEnLanz() + 1);
                        principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());
                        principal[1].setMaxCola(principal[0].getMaxCola());
                        principal[1].setMaxTiempoDEspera(principal[0].getMaxTiempoDEspera());

                        int ultimaFila = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getRowCount() - 1;
                        Object o = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(ultimaFila, 1);
                        String s = String.valueOf(o);
                        int ultimoNroPersona = Integer.valueOf(s);

                        auxiliar[1].setNroPersona(ultimoNroPersona + 1);
                        auxiliar[1].setTiempoLlegada(principal[1].getReloj());
                        auxiliar[1].setEstado("En Lanzamiento");
                        double finLanzamiento = principal[1].getReloj() + tiempoTardaLanzamiento;
                        auxiliar[1].setFinLanza(finLanzamiento);
                        auxiliar[1].setTiempoEspera(0);
                        principal[1].setNroPersProxFinLanz(auxiliar[1].getNroPersona());
                        principal[1].setFinProxLanz(auxiliar[1].getFinLanza());
                    }

                } else { //la alfombra se encuentra suspendida y 
                    principal[1].setCantPersEnLanz(principal[0].getCantPersEnLanz() + 1);
                    principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());
                    principal[1].setMaxCola(principal[0].getMaxCola());
                    principal[1].setMaxTiempoDEspera(principal[0].getMaxTiempoDEspera());
                    principal[1].setNroPersProxFinLanz(principal[0].getNroPersProxFinLanz());
                    principal[1].setFinProxLanz(principal[0].getFinProxLanz());

                    int ultimaFila = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getRowCount() - 1;
                    Object o = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).getValueAt(ultimaFila, 1);
                    String s = String.valueOf(o);
                    int ultimoNroPersona = Integer.valueOf(s);

                    auxiliar[1].setNroPersona(ultimoNroPersona + 1);
                    auxiliar[1].setTiempoLlegada(principal[1].getReloj());
                    auxiliar[1].setEstado("En Espera");
                    auxiliar[1].setFinLanza(0);
                    auxiliar[1].setTiempoEspera(0);
                }
                ((ModeloTablaAlfombraPrincipal) this.jTable1.getModel()).anhadeFila(principal[1]);
                ((ModeloTablaPersonaAuxiliar) this.jTable2.getModel()).agregarObjeto(auxiliar[1]);

            break;}
            case 7: {
                // //Finalizo un lanzamiento de persona en alfombra
                principal[1].setEvento("Fin Lanzamiento");
                principal[1].setRND(principal[0].getRND());
                principal[1].setLLegaProxPers(principal[0].getLLegaProxPers());

                if (principal[0].getEstadoAlfombra() != "Suspendida") {
                    if (principal[0].getCantPersEnLanz() > 0) {
                        // Alfombra esta disponible y hay cola en personas lanzando - hay que recalcular prox fin lanzamiento
                        principal[1].setCantPersEnLanz(principal[0].getCantPersEnLanz() - 1);
                        principal[1].setFinLimpieza(principal[0].getFinLimpieza());
                        principal[1].setEsHoraSuspender(principal[0].getEsHoraSuspender());
                        principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());
                        principal[1].setMaxCola(principal[0].getMaxCola());
                        principal[1].setMaxTiempoDEspera(principal[0].getMaxTiempoDEspera());
                        //cambio el estado de la persona recien finaliza 
                        ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).cambiarEstadoFinalizado(principal[0].getNroPersProxFinLanz());
                        // actualizo el prximo fin lanzamiento
                        double tEspera = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).actualizoProximoFinalizar(principal[0].getNroPersProxFinLanz(), tiempoTardaLanzamiento);
//                      
                        principal[1].setNroPersProxFinLanz(principal[0].getNroPersProxFinLanz() + 1);
                        principal[1].setFinProxLanz(tEspera);

                    } else {
                        //Alfombre esta disponible y no hay cola 
                        principal[1].setCantPersEnLanz(principal[0].getCantPersEnLanz() - 1);
                        principal[1].setFinLimpieza(principal[0].getFinLimpieza());
                        principal[1].setEsHoraSuspender(principal[0].getEsHoraSuspender());
                        principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());
                        principal[1].setMaxCola(principal[0].getMaxCola());
                        principal[1].setMaxTiempoDEspera(principal[0].getMaxTiempoDEspera());
                        //cambio el estado de la persona recien finaliza 
                        ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).cambiarEstadoFinalizado(principal[0].getNroPersProxFinLanz());

                        principal[1].setNroPersProxFinLanz(0);
                        principal[1].setFinProxLanz(0);
                    }
                } else {
                    if (principal[0].getCantPersEnLanz() > 0) {
                        //la alfombra esta suspendida y hay cola personas en lanzamiento.
                        principal[1].setCantPersEnLanz(principal[0].getCantPersEnLanz() - 1);
                        principal[1].setFinLimpieza(principal[0].getFinLimpieza());
                        principal[1].setEsHoraSuspender(principal[0].getEsHoraSuspender());
                        principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());
                        principal[1].setMaxCola(principal[0].getMaxCola());
                        principal[1].setMaxTiempoDEspera(principal[0].getMaxTiempoDEspera());
                        //cambio el estado de la persona recien finaliza 
                        ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).cambiarEstadoFinalizado(principal[0].getNroPersProxFinLanz());
                        // actualizo el prximo fin lanzamiento
                        double tEspera = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).actualizoProximoFinalizar(principal[0].getNroPersProxFinLanz(), tiempoTardaLanzamiento);
//                      
                        principal[1].setNroPersProxFinLanz(principal[0].getNroPersProxFinLanz() + 1);
                        principal[1].setFinProxLanz(tEspera);
                    } else {// la alfombra suspendida y no hay cola personas el lanzamiento
                        principal[1].setCantPersEnLanz(principal[0].getCantPersEnLanz() - 1);
                        principal[1].setFinLimpieza(principal[0].getFinProxLanz() + tiempoLimpieza);
                        principal[1].setEsHoraSuspender(principal[1].getFinLimpieza() + tiempoSuspension);
                        principal[1].setEstadoAlfombra(principal[0].getEstadoAlfombra());
                        principal[1].setMaxCola(principal[0].getMaxCola());
                        principal[1].setMaxTiempoDEspera(principal[0].getMaxTiempoDEspera());
                        //cambio el estado de la persona recien finaliza 
                        ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).cambiarEstadoFinalizado(principal[0].getNroPersProxFinLanz());

                        principal[1].setNroPersProxFinLanz(principal[0].getNroPersProxFinLanz() + 1);
                        principal[1].setFinProxLanz(0);
                    }
//                
                }

                ((ModeloTablaAlfombraPrincipal) this.jTable1.getModel()).anhadeFila(principal[1]);
            break;}
            case 4: {
                //Fin Liempieza
                principal[1].setEvento("Fin Limpieza");
                principal[1].setRND(principal[0].getRND());
                principal[1].setLLegaProxPers(principal[0].getLLegaProxPers());

                principal[1].setFinLimpieza(0);
                principal[1].setEsHoraSuspender(principal[0].getEsHoraSuspender());
                int prox = principal[0].getNroPersProxFinLanz();
                double finLimpieza = principal[0].getFinLimpieza();
                double maxTiempoEspera = ((ModeloTablaPersonaAuxiliar) jTable2.getModel()).lanzamientoPersonasEnEspera(prox, tiempoTardaLanzamiento, finLimpieza);

                principal[1].setNroPersProxFinLanz(principal[0].getNroPersProxFinLanz() + principal[0].getCantPersEnLanz() - 1);
                principal[1].setFinProxLanz(finLimpieza + tiempoTardaLanzamiento);

                principal[1].setCantPersEnLanz(0);

                principal[1].setEstadoAlfombra("Disponible");
                if (maxTiempoEspera > principal[0].getMaxTiempoDEspera()) {
                    principal[1].setMaxTiempoDEspera(maxTiempoEspera);
                } else {
                    principal[1].setMaxTiempoDEspera(principal[0].getMaxTiempoDEspera());
                }
//// FALTA VER COMO CALCULAR LA MAXIMA COLAAA!!!!!!!!!!
                principal[1].setMaxCola(principal[0].getMaxCola());
                ((ModeloTablaAlfombraPrincipal) this.jTable1.getModel()).anhadeFila(principal[1]);
            break;
            }
            case 5:{// Es hora de suspender el lanzamiento de personas en alfombra
                principal[1].setEvento("Suspende");
                principal[1].setRND(principal[0].getRND());
                principal[1].setLLegaProxPers(principal[0].getLLegaProxPers());

                if (principal[0].getCantPersEnLanz() > 0) {
                    principal[1].setFinLimpieza(principal[0].getFinLimpieza());
                    principal[1].setEsHoraSuspender(0);
                } else {
                    principal[1].setFinLimpieza(principal[0].getEsHoraSuspender() + tiempoLimpieza);
                    principal[1].setEsHoraSuspender(principal[0].getEsHoraSuspender());
                }
                principal[1].setNroPersProxFinLanz(principal[0].getNroPersProxFinLanz());
                principal[1].setFinProxLanz(principal[0].getFinProxLanz());
                principal[1].setCantPersEnLanz(principal[0].getCantPersEnLanz());
                principal[1].setEstadoAlfombra("Suspendida");
                principal[1].setMaxTiempoDEspera(principal[0].getMaxTiempoDEspera());
                 ((ModeloTablaAlfombraPrincipal) this.jTable1.getModel()).anhadeFila(principal[1]);
             break;   
            }
        }
    }

//    public public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//
//
//
//
//
//
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Principal.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Principal.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Principal.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Principal.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Principal().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables
}
